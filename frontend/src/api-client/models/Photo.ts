/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CategoryEnum } from './CategoryEnum';
import {
    CategoryEnumFromJSON,
    CategoryEnumFromJSONTyped,
    CategoryEnumToJSON,
} from './CategoryEnum';

/**
 * 
 * @export
 * @interface Photo
 */
export interface Photo {
    /**
     * 
     * @type {number}
     * @memberof Photo
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    readonly name: string | null;
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    readonly image: string;
    /**
     * 
     * @type {Date}
     * @memberof Photo
     */
    readonly pubDate: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Photo
     */
    readonly shotDate: Date | null;
    /**
     * 
     * @type {number}
     * @memberof Photo
     */
    readonly trip: number | null;
    /**
     * 
     * @type {number}
     * @memberof Photo
     */
    readonly activity: number | null;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof Photo
     */
    readonly category: CategoryEnum;
}

/**
 * Check if a given object implements the Photo interface.
 */
export function instanceOfPhoto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "image" in value;
    isInstance = isInstance && "pubDate" in value;
    isInstance = isInstance && "shotDate" in value;
    isInstance = isInstance && "trip" in value;
    isInstance = isInstance && "activity" in value;
    isInstance = isInstance && "category" in value;

    return isInstance;
}

export function PhotoFromJSON(json: any): Photo {
    return PhotoFromJSONTyped(json, false);
}

export function PhotoFromJSONTyped(json: any, ignoreDiscriminator: boolean): Photo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'image': json['image'],
        'pubDate': (json['pub_date'] === null ? null : new Date(json['pub_date'])),
        'shotDate': (json['shot_date'] === null ? null : new Date(json['shot_date'])),
        'trip': json['trip'],
        'activity': json['activity'],
        'category': CategoryEnumFromJSON(json['category']),
    };
}

export function PhotoToJSON(value?: Photo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
    };
}

