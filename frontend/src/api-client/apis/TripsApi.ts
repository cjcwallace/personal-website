/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedTrip,
  Trip,
} from '../models';
import {
    PatchedTripFromJSON,
    PatchedTripToJSON,
    TripFromJSON,
    TripToJSON,
} from '../models';

export interface TripsCreateRequest {
    trip?: Trip;
}

export interface TripsDestroyRequest {
    id: number;
}

export interface TripsPartialUpdateRequest {
    id: number;
    patchedTrip?: PatchedTrip;
}

export interface TripsRetrieveRequest {
    id: number;
}

export interface TripsUpdateRequest {
    id: number;
    trip?: Trip;
}

/**
 * 
 */
export class TripsApi extends runtime.BaseAPI {

    /**
     */
    async tripsCreateRaw(requestParameters: TripsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trip>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/trips/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TripToJSON(requestParameters.trip),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     */
    async tripsCreate(requestParameters: TripsCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trip> {
        const response = await this.tripsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tripsDestroyRaw(requestParameters: TripsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tripsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/trips/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tripsDestroy(requestParameters: TripsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tripsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async tripsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Trip>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/trips/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TripFromJSON));
    }

    /**
     */
    async tripsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Trip>> {
        const response = await this.tripsListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tripsPartialUpdateRaw(requestParameters: TripsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tripsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/trips/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedTripToJSON(requestParameters.patchedTrip),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     */
    async tripsPartialUpdate(requestParameters: TripsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trip> {
        const response = await this.tripsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tripsRetrieveRaw(requestParameters: TripsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tripsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/trips/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     */
    async tripsRetrieve(requestParameters: TripsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trip> {
        const response = await this.tripsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tripsUpdateRaw(requestParameters: TripsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Trip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tripsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/trips/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TripToJSON(requestParameters.trip),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripFromJSON(jsonValue));
    }

    /**
     */
    async tripsUpdate(requestParameters: TripsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Trip> {
        const response = await this.tripsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
