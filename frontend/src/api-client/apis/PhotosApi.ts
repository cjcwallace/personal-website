/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchedPhoto,
  Photo,
} from '../models';
import {
    PatchedPhotoFromJSON,
    PatchedPhotoToJSON,
    PhotoFromJSON,
    PhotoToJSON,
} from '../models';

export interface PhotosCreateRequest {
    photo?: Photo;
}

export interface PhotosDestroyRequest {
    id: number;
}

export interface PhotosPartialUpdateRequest {
    id: number;
    patchedPhoto?: PatchedPhoto;
}

export interface PhotosRetrieveRequest {
    id: number;
}

export interface PhotosUpdateRequest {
    id: number;
    photo?: Photo;
}

/**
 * 
 */
export class PhotosApi extends runtime.BaseAPI {

    /**
     */
    async photosCreateRaw(requestParameters: PhotosCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Photo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/photos/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhotoToJSON(requestParameters.photo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoFromJSON(jsonValue));
    }

    /**
     */
    async photosCreate(requestParameters: PhotosCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Photo> {
        const response = await this.photosCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async photosDestroyRaw(requestParameters: PhotosDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling photosDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/photos/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async photosDestroy(requestParameters: PhotosDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.photosDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async photosListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Photo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/photos/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PhotoFromJSON));
    }

    /**
     */
    async photosList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Photo>> {
        const response = await this.photosListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async photosPartialUpdateRaw(requestParameters: PhotosPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Photo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling photosPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/photos/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPhotoToJSON(requestParameters.patchedPhoto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoFromJSON(jsonValue));
    }

    /**
     */
    async photosPartialUpdate(requestParameters: PhotosPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Photo> {
        const response = await this.photosPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async photosRetrieveRaw(requestParameters: PhotosRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Photo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling photosRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/photos/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoFromJSON(jsonValue));
    }

    /**
     */
    async photosRetrieve(requestParameters: PhotosRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Photo> {
        const response = await this.photosRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async photosUpdateRaw(requestParameters: PhotosUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Photo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling photosUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/photos/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PhotoToJSON(requestParameters.photo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PhotoFromJSON(jsonValue));
    }

    /**
     */
    async photosUpdate(requestParameters: PhotosUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Photo> {
        const response = await this.photosUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
